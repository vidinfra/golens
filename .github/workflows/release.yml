name: Release

on:
  # push:
    # tags:
    #   - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.0.0)'
        required: true
        type: string

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.23'

    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-1.23-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-1.23-

    - name: Install development tools
      run: make install-tools

    - name: Run full test suite
      run: make release

    - name: Build examples
      run: |
        mkdir -p release/examples
        cd examples/basic && go build -o ../../release/examples/basic-example .
        cd ../gin-integration && go build -o ../../release/examples/gin-integration-example .

    - name: Create release archives
      run: |
        # Create source archive
        git archive --format=tar.gz --prefix=golens-${{ github.ref_name }}/ HEAD > release/golens-${{ github.ref_name }}-source.tar.gz
        
        # Create examples archive
        cd release/examples
        tar -czf ../golens-${{ github.ref_name }}-examples.tar.gz *
        cd ../..

    - name: Generate changelog
      id: changelog
      run: |
        # Simple changelog generation - you might want to use a more sophisticated tool
        echo "CHANGELOG<<EOF" >> $GITHUB_OUTPUT
        echo "## Changes in ${{ github.ref_name }}" >> $GITHUB_OUTPUT
        echo "" >> $GITHUB_OUTPUT
        git log --pretty=format:"- %s" $(git describe --tags --abbrev=0 HEAD^)..HEAD >> $GITHUB_OUTPUT || echo "- Initial release" >> $GITHUB_OUTPUT
        echo "" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: Create GitHub Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref_name }}
        release_name: GoLens ${{ github.ref_name }}
        body: |
          # GoLens Filter Library ${{ github.ref_name }}
          
          A powerful and flexible Go library for building database query filters with JSON API compliance.
          
          ## ðŸ“‹ Features
          - JSON API compliant filtering: `filter[field][operator]=value`
          - Simple format support: `filter[field]=value`
          - Configurable operator validation per field
          - Sorting with field allowlists
          - Gin framework integration
          - PostgreSQL/Bun ORM support
          
          ## ðŸ“¦ Installation
          ```bash
          go get github.com/vidinfra/golens@${{ github.ref_name }}
          ```
          
          ## ðŸš€ Quick Start
          ```go
          import "github.com/vidinfra/golens/pkg/filter"
          
          result := filter.New(c, query).
              AllowFields("name", "email", "status").
              Apply().
              ApplySort().
              Query()
          ```
          
          ${{ steps.changelog.outputs.CHANGELOG }}
          
          ## ðŸ“š Documentation
          - [README](./README.md)
          - [Examples](./examples/)
          - [API Documentation](https://pkg.go.dev/github.com/vidinfra/golens)
          
          ---
          **Full Changelog**: https://github.com/vidinfra/golens/compare/...
        draft: false
        prerelease: false

    - name: Upload source archive
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./release/golens-${{ github.ref_name }}-source.tar.gz
        asset_name: golens-${{ github.ref_name }}-source.tar.gz
        asset_content_type: application/gzip

    - name: Upload examples archive
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./release/golens-${{ github.ref_name }}-examples.tar.gz
        asset_name: golens-${{ github.ref_name }}-examples.tar.gz
        asset_content_type: application/gzip

  publish-docs:
    name: Publish Documentation
    runs-on: ubuntu-latest
    needs: create-release
    if: startsWith(github.ref, 'refs/tags/')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.23'

    - name: Generate documentation
      run: |
        go install golang.org/x/tools/cmd/godoc@latest
        mkdir -p docs
        # Generate package documentation
        echo "# GoLens API Documentation" > docs/api.md
        echo "" >> docs/api.md
        echo "Generated for version ${{ github.ref_name }}" >> docs/api.md

    - name: Deploy to GitHub Pages
      uses: peaceiris/actions-gh-pages@v3
      if: github.ref == 'refs/heads/main'
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./docs
